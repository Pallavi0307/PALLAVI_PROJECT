// context/AuthContext.jsx
import React, { createContext, useContext, useState } from "react";

const AuthContext = createContext();

export function AuthProvider({ children }) {
  const [user, setUser] = useState(() => {
    const savedUser = localStorage.getItem("loggedInUser");
    return savedUser ? JSON.parse(savedUser) : null;
  });

  const login = (email, password) => {
    const users = JSON.parse(localStorage.getItem("users")) || [
      { id: "1", role: "Admin", email: "admin@entnt.in", password: "admin123" },
      { id: "2", role: "Patient", email: "patient@entnt.in", password: "patient123" },
    ];

    const found = users.find(
      (u) => u.email === email && u.password === password
    );
    if (found) {
      localStorage.setItem("loggedInUser", JSON.stringify(found));
      setUser(found);
      return true;
    }
    return false;
  };

  const logout = () => {
    localStorage.removeItem("loggedInUser");
    setUser(null);
  };

  return (
    <AuthContext.Provider value={{ user, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  return useContext(AuthContext);
}
// routes/RoleProtectedRoute.jsx
import React from "react";
import { Navigate } from "react-router-dom";
import { useAuth } from "../context/AuthContext";

export default function RoleProtectedRoute({ allowedRoles, children }) {
  const { user } = useAuth();

  if (!user) {
    // Not logged in — redirect to login page
    return <Navigate to="/" replace />;
  }

  if (!allowedRoles.includes(user.role)) {
    // Role not authorized — redirect to unauthorized page
    return <Navigate to="/unauthorized" replace />;
  }

  // Authorized — render child components
  return children;
}
// pages/LoginPage.jsx
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../context/AuthContext";

export default function LoginPage() {
  const { login } = useAuth();
  const navigate = useNavigate();

  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");

  const handleSubmit = (e) => {
    e.preventDefault();
    if (login(email, password)) {
      navigate("/dashboard");
    } else {
      setError("Invalid email or password");
      setTimeout(() => setError(""), 3000);
    }
  };

  return (
    <div className="min-h-screen flex flex-col items-center justify-center bg-gradient-to-br from-pink-100 via-purple-100 to-pink-200 px-4">
      <form
        onSubmit={handleSubmit}
        className="bg-white rounded-2xl shadow-xl p-10 max-w-md w-full"
      >
        <h2 className="text-4xl font-extrabold text-pink-700 mb-8 text-center">
          Dental Center Login
        </h2>
        {error && (
          <p className="mb-4 text-center text-red-500">{error}</p>
        )}
        <input
          type="email"
          placeholder="Email"
          className="w-full border-b-2 border-pink-300 focus:border-pink-600 outline-none text-lg p-2 mb-6"
          required
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          autoComplete="username"
        />
        <input
          type="password"
          placeholder="Password"
          className="w-full border-b-2 border-pink-300 focus:border-pink-600 outline-none text-lg p-2 mb-8"
          required
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          autoComplete="current-password"
        />
        <button
          type="submit"
          className="w-full bg-pink-600 text-white py-3 rounded-xl shadow-md hover:bg-pink-700 transition"
        >
          Login
        </button>
        <div className="mt-6 text-center text-pink-600 text-sm">
          <strong>Test Credentials:</strong>
          <br />
          Admin: admin@entnt.in / admin123
          <br />
          Patient: patient@entnt.in / patient123
        </div>
      </form>
    </div>
  );
}
// pages/Unauthorized.jsx
export default function Unauthorized() {
  return (
    <div className="min-h-screen flex flex-col items-center justify-center bg-red-50 text-red-700 p-4">
      <h1 className="text-4xl font-bold mb-4">Access Denied</h1>
      <p className="text-lg">You do not have permission to view this page.</p>
    </div>
  );
}

// components/NavBar.jsx
import { Link } from "react-router-dom";
import { useAuth } from "../context/AuthContext";

export default function NavBar() {
  const { user, logout } = useAuth();

  return (
    <nav className="bg-pink-600 text-white px-6 py-4 flex justify-between items-center">
      <div className="font-bold text-xl">Dental Dashboard</div>
      <div className="space-x-6">
        {user?.role === "Admin" && (
          <>
            <Link to="/dashboard" className="hover:underline">Dashboard</Link>
            <Link to="/patients" className="hover:underline">Patients</Link>
            <Link to="/appointments" className="hover:underline">Appointments</Link>
          </>
        )}
        {user?.role === "Patient" && (
          <Link to="/my-appointments" className="hover:underline">My Appointments</Link>
        )}
        <button
          onClick={logout}
          className="bg-pink-800 hover:bg-pink-900 px-3 py-1 rounded ml-4"
        >
          Logout
        </button>
      </div>
    </nav>
  );
}

// pages/DashboardPage.jsx
export default function DashboardPage() {
  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-4">Welcome to Dental Center Admin Dashboard</h1>
      {/* Add your dashboard KPIs and components here */}
      <p>This area will show patient counts, upcoming appointments, revenue, etc.</p>
    </div>
  );
}

// App.jsx
import { Routes, Route } from "react-router-dom";
import { AuthProvider } from "./context/AuthContext";
import RoleProtectedRoute from "./routes/RoleProtectedRoute";
import LoginPage from "./pages/LoginPage";
import DashboardPage from "./pages/DashboardPage";
import Unauthorized from "./pages/Unauthorized";
import NavBar from "./components/NavBar";

// Dummy components placeholders
function PatientsPage() {
  return <div className="p-6">Patients Management (Admin Only)</div>;
}
function AppointmentsPage() {
  return <div className="p-6">Appointments Management (Admin Only)</div>;
}
function PatientAppointmentsPage() {
  return <div className="p-6">My Appointments (Patient Only)</div>;
}

export default function App() {
  return (
    <AuthProvider>
      <NavBar />
      <Routes>
        <Route path="/" element={<LoginPage />} />

        <Route
          path="/dashboard"
          element={
            <RoleProtectedRoute allowedRoles={["Admin"]}>
              <DashboardPage />
            </RoleProtectedRoute>
          }
        />
        <Route
          path="/patients"
          element={
            <RoleProtectedRoute allowedRoles={["Admin"]}>
              <PatientsPage />
            </RoleProtectedRoute>
          }
        />
        <Route
          path="/appointments"
          element={
            <RoleProtectedRoute allowedRoles={["Admin"]}>
              <AppointmentsPage />
            </RoleProtectedRoute>
          }
        />

        <Route
          path="/my-appointments"
          element={
            <RoleProtectedRoute allowedRoles={["Patient"]}>
              <PatientAppointmentsPage />
            </RoleProtectedRoute>
          }
        />

        <Route path="/unauthorized" element={<Unauthorized />} />
        <Route path="*" element={<div className="p-6">Page Not Found</div>} />
      </Routes>
    </AuthProvider>
  );
}
